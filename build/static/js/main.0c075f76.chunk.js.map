{"version":3,"sources":["assets/imgs/star.png","assets/imgs/star-wars.png","assets/theme.mp3","assets/js/variables.js","components/MiddleContent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","white","grayLigth","grayDark","black","yellow","black_transparent","mobile","tablet","tabletFull","desktopFull","SectionTop","styled","section","css","List","div","Title","p","Button","button","PlanetsResult","state","planets","NumberHolder","GenerateRandomNumber","RandomNumber","Math","floor","random","setState","fetch","then","res","json","results","content","planet","this","length","name","population","terrain","films","onClick","React","Component","MainGeneral","main","starBg","MainMenu","url","soundfile","playStatus","Sound","status","PLAYING","onLoading","handleSongLoading","onPlaying","handleSongPlaying","onFinishedPlaying","handleSongFinishedPlaying","className","src","starwarsLogo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,iRCA5B,EACN,CACLC,MAAO,OACPC,UAAW,UACXC,SAAU,UACVC,MAAO,OACPC,OAAQ,SACRC,kBAAmB,WAPR,EAeP,CACJC,OAAQ,IACRC,OAAQ,IACRC,WAAY,KACZC,YAAa,M,49BCfjB,IAAMC,EAAaC,IAAOC,QAAV,IAKMC,EAASL,YAKzBM,EAAOH,IAAOI,IAAV,IAKQF,EAAUR,kBACJQ,EAAUT,OAGDS,EAAUT,QAOrCY,EAAQL,IAAOM,EAAV,IAIAJ,EAAUb,OAIfkB,EAASP,IAAOQ,OAAV,IAGUN,EAAUT,OAEhBS,EAAUT,OAGfS,EAAUV,MAKEU,EAASL,YAKXY,E,4MACnBC,MAAQ,CAAEC,QAAS,GAAIC,aAAc,G,EAYrCC,qBAAqB,WACnB,IAAIC,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAC/CH,IAAiB,EAAKJ,MAAME,eAC7BE,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GAElD,EAAKC,SAAS,CACZN,aAAeE,K,kEAhBE,IAAD,OAClBK,MAAM,gCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,EAAKH,SAAS,CACVP,QAASU,EAAIE,e,+BAgBrB,IAAIC,EAAU,0CACVC,EAAS,GAiBb,OAfkC,IAA9BC,KAAKhB,MAAMC,QAAQgB,SACrBF,EAASC,KAAKhB,MAAMC,QAAQe,KAAKhB,MAAME,cACvCY,EACE,kBAACrB,EAAD,KACA,4BACI,4BAAI,kBAACE,EAAD,SAASoB,EAAOG,KAAhB,MACJ,4BAAI,0CAAJ,IAAwBH,EAAOI,YAC/B,4BAAI,uCAAJ,IAAqBJ,EAAOK,SAC5B,4BAAI,4CAAkBL,EAAOM,MAAMJ,OAA/B,UAAJ,MAEJ,kBAACpB,EAAD,CAAQyB,QAASN,KAAKb,sBAAsB,sCAMhD,kBAACd,EAAD,KACGyB,O,GA5CoCS,IAAMC,W,yNC7CjD,IAAMC,EAAcnC,IAAOoC,KAAV,IAESC,KAKLC,E,uKAIjB,OACA,kBAACH,EAAD,KACE,kBAAC,IAAD,CACCI,IAAKC,IACLC,WAAYC,IAAMC,OAAOC,QACzBC,UAAWnB,KAAKoB,kBAChBC,UAAWrB,KAAKsB,kBAChBC,kBAAmBvB,KAAKwB,4BAEzB,4BAAQC,UAAU,cAChB,yBAAKC,IAAKC,IAAcF,UAAU,WAAWG,IAAI,SACjD,kBAAC,EAAD,Y,GAf8BrB,IAAMC,WCNxBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c075f76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.d7a61190.png\";","module.exports = __webpack_public_path__ + \"static/media/star-wars.bfbb6e3f.png\";","module.exports = __webpack_public_path__ + \"static/media/theme.ec105311.mp3\";","export default {\n  color: {\n    white: '#fff',\n    grayLigth: '#EFEAE6',\n    grayDark: '#D6CDC6',\n    black: '#000',\n    yellow: 'yellow',\n    black_transparent: '#252924'\n  },\n  font: {\n    size: 16,\n    family: 'AprovaSans',\n    familyBold: 'AprovaSansBold',\n    familyBlack: 'AprovaSansBlack'\n  },\n  grid: {\n    mobile: 680,\n    tablet: 768,\n    tabletFull: 1024,\n    desktopFull: 1366\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport css from '../assets/js/variables';\n\nconst SectionTop = styled.section`\n position: relative;\n top: 50%;\n transform: translate(0, 10%);\n width: 90%;\n @media (min-width: ${css.grid.tabletFull}px) {\n   width: 500px;\n }\n`\n\nconst List = styled.div`\n  display: flex;\n  padding: 0;\n  flex-direction: column;\n  ul {\n    background: ${css.color.black_transparent};\n    border: 2px solid ${css.color.yellow};\n    li {\n      padding 20px 10px;\n      border-bottom: 2px solid ${css.color.yellow};\n      text-align: left;\n    }\n  }\n\n`\n\nconst Title = styled.p`\n  padding 0;\n  font-size: 40px;\n  text-align: center;\n  color: ${css.color.white};\n`\n\n\nconst Button = styled.button`\n  display: block;\n  margin: 30px auto;\n  border: 1px solid ${css.color.yellow};\n  border-radius: 20px;\n  background: ${css.color.yellow};\n  width: 100%;\n  height: 40px;\n  color: ${css.color.black};\n  cursor: pointer;\n  :hover {\n    opacity: 0.9;\n  }\n  @media (min-width: ${css.grid.tabletFull}px) {\n    width: 200px;\n  }\n`\n\nexport default class PlanetsResult extends React.Component {\n  state = { planets: [], NumberHolder: 0}\n\n  componentDidMount() {\n    fetch('https://swapi.co/api/planets')\n    .then(res => res.json())\n    .then(res => {\n        this.setState({\n            planets: res.results\n        })\n    })\n  }\n\n  GenerateRandomNumber=()=> {\n    let RandomNumber = Math.floor(Math.random() * 9) + 0 ;\n    if (RandomNumber === this.state.NumberHolder) {\n       RandomNumber = Math.floor(Math.random() * 9) + 0 ;\n    }\n    this.setState({\n      NumberHolder : RandomNumber\n    })\n  }\n\n  render () {\n    let content = <h2>Loading...</h2>\n    let planet = []\n\n    if (this.state.planets.length !== 0) {\n      planet = this.state.planets[this.state.NumberHolder]\n      content = (\n        <List>\n        <ul>\n            <li><Title> {planet.name} </Title></li>\n            <li><b>Population:</b> {planet.population}</li>\n            <li><b>Terrain:</b> {planet.terrain}</li>\n            <li><b>Feature(s) in {planet.films.length} Films</b> </li>\n        </ul>\n        <Button onClick={this.GenerateRandomNumber}><b>NEXT</b></Button>\n        </List>\n      )\n    }\n\n    return (\n    <SectionTop>\n      {content}\n    </SectionTop>\n    )\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport './assets/scss/reset.scss';\nimport './assets/scss/main.scss';\nimport starBg from './assets/imgs/star.png';\nimport starwarsLogo from './assets/imgs/star-wars.png';\nimport MiddleContent from './components/MiddleContent';\nimport soundfile from './assets/theme.mp3';\nimport Sound from 'react-sound'\n\nconst MainGeneral = styled.main`\n  text-align: center;\n  background-image: url(${starBg});\n  background-size: contain;\n  background-repeat: repeat;\n`\n\nexport default class MainMenu extends React.Component {\n\n  render () {\n\n    return (\n    <MainGeneral>\n      <Sound\n       url={soundfile}\n       playStatus={Sound.status.PLAYING}\n       onLoading={this.handleSongLoading}\n       onPlaying={this.handleSongPlaying}\n       onFinishedPlaying={this.handleSongFinishedPlaying}\n       /> \n      <header className=\"App-header\">\n        <img src={starwarsLogo} className=\"App-logo\" alt=\"logo\" />\n        <MiddleContent />\n      </header>\n    </MainGeneral>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n  \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}